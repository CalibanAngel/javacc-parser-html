options
{
  IGNORE_CASE = true;
  STATIC = false;
}

PARSER_BEGIN(HtmlParser)
package parser;
import java.util.ArrayList;
import java.io.*;

public class HtmlParser
{
  private static String getTokenText(Token first, Token cur)
  {
    Token t;
    StringBuffer sb = new StringBuffer();
    for (t = first; t != cur.next; t = t.next)
    {
      if (t.specialToken != null)
      {
        Token tt = t.specialToken;
        while (tt.specialToken != null) 
        tt = tt.specialToken;
        for (; tt != null; tt = tt.next) 
        sb.append(tt.image);
      }
      ;
      sb.append(t.image);
    }
    ;
    return sb.toString();
  }

  public static void main(String args []) throws ParseException, FileNotFoundException, IOException
  {
    if (args.length == 0)
    {
      System.out.println("HELP: Need an HTML file as argument");
      return;
    }
    File file = new File(args [0]);
    if (!file.exists() && !file.canRead())
    {
      System.out.println("Error: not a file");
      return;
    }
    ArrayList < String > res = new ArrayList < String > ();
    try
    {
      FileReader is = new FileReader(file);
      BufferedReader br = new BufferedReader(is);
      HtmlParser parser = new HtmlParser(is);
      System.out.println("Reading from file...");
      for (String line; (line = br.readLine()) != null;)
      {
        System.out.println("OK ->" + line);
        res.add("");
        parser.tag();
        //parser.end_tag();
      }
    }
    catch (Exception e)
    {
      System.out.println("NOK.");
      System.out.println(e.getMessage());
      //HtmlParser.ReInit(System.in);
    }
    catch (Error e)
    {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      return;
    }
  }
}

PARSER_END(HtmlParser)

SKIP :
{
  <
    (
      " "
    | "\t"
    | "\n"
    | "\r"
    )+ >
| < "<!" (~[ ">" ])* >
}

<* >
TOKEN :
{
  < #ALPHA_CHAR : [ "a"-"z", "A"-"Z" ] >
| < #NUM_CHAR : [ "0"-"9" ] >
| < #ALPHANUM_CHAR : [ "a"-"z", "A"-"Z", "0"-"9" ] >
| < #IDENTIFIER_CHAR : [ "a"-"z", "A"-"Z", "0"-"9", "_", "-", ".", ":" ] >
| < #IDENTIFIER : < ALPHA_CHAR > (< IDENTIFIER_CHAR >)* >
| < #QUOTED_STRING_NB :
    (
      "'" (~[ "'", "\r", "\n" ])* "'"
    )
  |
    (
      "\"" (~[ "\"", "\r", "\n" ])* "\""
    ) >
| < #QUOTED_STRING :
    (
      "'" (~[ "'" ])* "'"
    )
  |
    (
      "\"" (~[ "\"" ])* "\""
    ) >
| < #WHITESPACE :
    (
      " "
    | "\t"
    | "\n"
    | "\r"
    ) >
| < #NEWLINE :
    (
      "\r\n"
    | "\r"
    | "\n"
    ) >
| < #QUOTE :
    (
      "'"
    | "\""
    ) >
}

< DEFAULT >
TOKEN :
{
  < EOL :
    (
      " "
    | "\t"
    )*
    < NEWLINE > >
| < TAG_START : 		"<" > 	: LexStartTag
| < ENDTAG_START : 	"</" > 	: LexStartTag
}

< LexInTag >
SPECIAL_TOKEN :
{
  < (< WHITESPACE >)+ >
}

< LexStartTag >
TOKEN :
{
  < TAG_NAME : < IDENTIFIER > > 	: LexInTag
}

< LexInTag >
TOKEN :
{
  < ATTR_NAME : < IDENTIFIER > >
| < TAG_END : 		">" > 	: DEFAULT
| < TAG_SLASHEND : 	"/>" > 	: DEFAULT
| < ATTR_EQ : "=" > : LexAttrVal
}

< LexAttrVal >
SPECIAL_TOKEN :
{
  < < WHITESPACE > >
}

< LexAttrVal >
TOKEN :
{
  < ATTR_VAL :
    < QUOTED_STRING >
  | (~[ ">", "\"", "'", " ", "\t", "\n", "\r" ])+ > : LexInTag
}

String attr() :
{
}
{
  (< ATTR_NAME > < ATTR_EQ > < ATTR_VAL >) *
}

String tag() :
{
  Token t;
  Token firstToken = getToken(1);
}
{
  try
  {
    < TAG_START > t = < TAG_NAME > attr() < TAG_END >
    //{ System.out.println("BITE"); }
    {
      System.out.println("tag : " + t.image);
      return (t.image);
    }
  }
  catch (ParseException ex)
  {
    token_source.SwitchTo(DEFAULT);
    String s = getTokenText(firstToken, getNextToken());
    return s;
  }
}

String end_tag() :
{
  Token t;
  Token firstToken = getToken(1);
}
{
  try
  {
    < ENDTAG_START > t = < TAG_NAME > < TAG_END >
    {
      System.out.println("endtag : " + t.image);
      return (t.image);
    }
  }
  catch (ParseException ex)
  {
    token_source.SwitchTo(DEFAULT);
    String s = getTokenText(firstToken, getNextToken());
    return s;
  }
}

void read_line() :
{
}
{
  {
    System.out.println("read_line");
  }
}
